AWSTemplateFormatVersion: 2010-09-09
Description: |
  The Phonebook Application aims to create a phonebook application 
  in Python and deployed as a web application with Flask on AWS 
  Application Load Balancer with Auto Scaling Group of Elastic 
  Compute Cloud (EC2) Instances and Relational Database Service(RDS)
  using AWS Cloudformation Service.


  
Resources:
  ALBsecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allows HTTP (80) connections to Application Load Balancer
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          CidrIp: 0.0.0.0/0
      #VpcId:  if not written stack makes it default
  WebserverSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP access via port 80, SSH access and MySQL/Aurora   
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          #CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !GetAtt ALBsecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - FromPort: 3306
          IpProtocol: '-1'
          ToPort: 3306
          CidrIp: 0.0.0.0/0 
          
  RDSSecurityGroup:
    Type: "AWS::RDS::DBSecurityGroup"
    Properties:
      DBSecurityGroupIngress: #required
        - EC2SecurityGroupName:
            Ref: WebserverSecurityGroup
      GroupDescription: DataBasaSecurityGroup #required
      
          

  WebserverLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: CFlaunchtemplate
      LaunchTemplateData:
        ImageId: ami-0947d2ba12ee1ff75
        InstanceType: t2.micro
        KeyName: key
        SecurityGroupIds: 
          - !GetAtt WebserverSecurityGroup.GroupId
        TagSpecifications: 
          - ResourceType: instance
            Tags: 
            - Key: Name
              Value: !Sub Web Server of ${AWS::StackName}
        UserData: 
          Fn::Base64:
            !Sub |
              #! /bin/bash
              sudo yum update -y
              sudo yum install python3 -y
              sudo pip3 install flask 
              sudo pip3 install flask_sqlalchemy 
              sudo pip3 install flask-mysql           
              cd /home/ec2-user
              mkdir templates
              cd templates
              wget https://raw.githubusercontent.com/E2011Yahya/cw_myworkshop/master/aws/projects/004-phonebook-web-application/templates/index.html
              wget https://raw.githubusercontent.com/E2011Yahya/cw_myworkshop/master/aws/projects/004-phonebook-web-application/templates/add-update.html 
              wget https://raw.githubusercontent.com/E2011Yahya/cw_myworkshop/master/aws/projects/004-phonebook-web-application/templates/delete.html
              cd ..
              wget https://raw.githubusercontent.com/E2011Yahya/cw_myworkshop/master/aws/projects/004-phonebook-web-application/phonebook-app.py
              echo "${RDSinstance.Endpoint.Address}" >> dbserver.endpoint
              sudo python3 phonebook-app.py
  ALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !GetAtt WebserverSecurityGroup.VpcId

  

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      SecurityGroups: 
        - !GetAtt ALBsecurityGroup.GroupId 
      Subnets: 
        - subnet-562cd867
        - subnet-6a9c334b
        - subnet-6be67c65
        - subnet-c96b1b84
        - subnet-d53e9fb3
        - subnet-efa805b0
      Type: application 
     
        
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer  #required
      Port: 80 #required
      Protocol: HTTP #required
      
  ALBAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        !GetAZs 
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateId: !Ref WebserverLaunchTemplate
        Version: !GetAtt WebserverLaunchTemplate.DefaultVersionNumber      
      MaxSize: '3' #required
      MinSize: '1' #required
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  RDSinstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: '20'
      BackupRetentionPeriod: 7
      DBInstanceClass: db.t2.micro #required
      #DBInstanceIdentifier: PhonebookDatabaseRDS
      DBName: phonebook  # app.py'deki yazılacak
      DBSecurityGroups: 
        - !Ref RDSSecurityGroup
      DeleteAutomatedBackups: true
      DeletionProtection: false
      Engine: mysql
      EngineVersion: 8.0.20
      MasterUserPassword: clarusway-1 # app.py deki yazılacak
      MasterUsername: admin # app.py deki yazılacak
      Port: '3306'
      PreferredBackupWindow: 01:00-02:00 
      PreferredMaintenanceWindow: sun:05:00-sun:06:00 
      PubliclyAccessible: true
  
Outputs:
  WebsiteURL:
    Value: !Sub 
      - http://${ALBAddress}
      - ALBAddress: !GetAtt ApplicationLoadBalancer.DNSName
    Description: Phonebook Application Load Balancer URL
  RDSendpoint:
    Description: Phonebook DB endpoint
    Value: !Ref RDSinstance
    